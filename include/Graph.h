#pragma once

#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <fstream>
#include <sstream>

using std::string;
using std::vector;
using std::map;

class Graph {
  public:
    struct Airport {
        //Name of airport
        string name_;
        //Id of airport
        size_t id_;
        Airport (string name, size_t id) : name_(name), id_(id) {};
        Airport() = default;
    };

    Graph() = default;

    /**
      * Constructs a graph based on input
      * @param input_file The name of the file to be read from
      */
    Graph(string input_file);

    /**
      * Given a start Airport, find all of the airports that it leads to
      * @param start the starting Airport
      * @return a vector of destination Airports 
      */
    vector<Airport> GetDestinations(Airport start) const; 
    
    /** 
      * Given a start and destination id for an airport,
      * returns the shortest path using a vector of airport_id's 
      * @param start_id the id of the starting airport
      * @param destination_id the id of the destination airport
      */
    vector<int> Dijkstra(int start_id, int destination_id);
  
    /** 
      * Given a start and destination name for an airport,
      * returns the shortest path using a vector of airport names 
      * @param start_name the name of the starting airport
      * @param destination_name the name of the destination airport
      */
    vector<string> Dijkstra(string start_name, string destination_name);

    /**
      * Getter for adjacency matrix
      * @return the adjacency matrix
      */
    vector<vector<double>> GetAdjMatrix() const;

    /**
      * Getter for airport Id
      * @return A map with key airport name and value airport Id
      */
    map<string, int> GetIdMap() const;

    /**
      * Getter for airports
      * @return A vector with Airport ordered by internal id
      */
    vector<Airport> GetAirports() const;

  private:
    // The start and end airport names are given
    // in the nth position of the input file 
    size_t kStartPos = 3;
    size_t kEndPos = 5;

    // map that gives the airport Id based on the name
    // Unique Id generated by mapping each name to number of airports
    map<string, int> airport_id_;

    // vector of Airports
    vector<Airport> airports_;

    // 2D vector that stores the weight of the edge from Airport i to j
    vector<vector<double>> adj_matrix_;

    // Total number of airports
    size_t no_of_airports_;
  
    /**
      * Parses the start airport name from a given input line
      * @param input_line a line from input file 
      * @return the name of the starting airport
      */
    string GetStartAirportName(string input_line) const;

    /**
      * Parses the start airport name from a given input line
      * @param input_line a line from input file
      * @return the name of the destination airport
      */
    string GetEndAirportName(string input_line) const;

    /**
      * Adds a new airport to airport_id, airports, and the adjancency matrix if it does not exist
      * @param name the name of the airport
      */
    void AddAirport(string name);

    /**
      * Updates the weight of the adjacency matrix for airport id A to B
      * @param start_id the aiport id where the flight took off
      * @param end_id the airport id where the flight landed
      */
    void AddFlight(int start_id, int end_id);

    /**
      * Adds a new airport to the airports vector
      * @param name the name of the airport to add
      */
    void AddToAirports(string name);

    /** 
      * Updates the map to map from the name of the airport to the total airport count
      * @param name the name of the airport used as the key for the map
      */
    void AddToAirportId(string name);

    /**
      * Updates the size of the adjacency matrix. Param not used
      * @param name the name of the airport
      */
    void AddToAdjMatrix();
};
